version: '3.8'

# Production Docker Compose Configuration
# Use with: docker-compose -f docker-compose.prod.yml up -d

services:
  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ar_automation_backend_prod
    restart: always
    environment:
      # Database configuration - Use external Neon DB
      DATABASE_URL: ${DATABASE_URL}

      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY:-}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-false}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT:-ar-automation}

      # Application settings
      ENVIRONMENT: production
    # Don't expose backend port externally in production
    # Only accessible through frontend nginx
    expose:
      - "8000"
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/health\")'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ar_automation_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # React Frontend (Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ar_automation_frontend_prod
    restart: always
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - ar_automation_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  ar_automation_network:
    driver: bridge
